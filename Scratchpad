Proposed Verb Specifiers

Move (m)
    North (n)
    South (s)
    East (e)
    West (w)
Climb (cl)
    Up (u) [Object] (Environment Object on Tile)
    Down (d) [Object] (Environment Object on Tile)
Enter (en) [Object] (Environment Object on Tile)
Exit (ex)
Look (l)
Examine (exa) [Object] (Inventory Item in Inventory)
Get (g) [Object] (Inventory Item on Tile)
Take (t) [Object] (Inventory Item on Tile)
Drop (d) [Object] (Inventory Item in Inventory)
Inventory (i) (Changes Game Mode to Inventory)
Use (u) [Object] (Inventory Item in Inventory)
Equip (eq) [Object] (Inventory Item in Inventory)
Open (o) [Object] (Environment Object on Tile)

Proposed Object Specifiers

North
South
East
West
Up
Down
Left
Right
Here

Tree
Ladder
Rope
Wall
Stairs
Pole

Door
Chest
Box
Crate
Desk
Drawer
Mirror
Table

Lamp
Curtain
Blinds
Window


Param(
    [BattleEntity]$Self,
    [BattleEntity]$Target,
    [BattleAction]$SelfAction
)

If($SelfAction.Uses -GT 0) {
    $SelfAction.Uses--

    $ExecuteChance = Get-Random -Minimum 0.0 -Maximum 1.0
    If($ExecuteChance -GT $SelfAction.Chance) {
        Return [BattleActionResult]::new(
            [BattleActionResultType]::FailedAttackFailed,
            $Self,
            $Target,
            0
        )
    }

    $TargetEffectiveEvasion = [Math]::Round((0.1 + ($Target.Stats[[StatId]::Speed].Base * (Get-Random -Minimum 0.001 -Maximum 0.003))) * 100)
    $EvRandFactor           = Get-Random -Minimum 1 -Maximum 100
    If($EvRandFactor -LE $TargetEffectiveEvasion) {
        Return [BattleActionResult]::new(
            [BattleActionResultType]::FailedAttackMissed,
            $Self,
            $Target,
            0
        )
    }
    
    $EffectiveDamageP1 = [Math]::Round([Math]::Abs(
        $SelfAction.EffectValue * (
            ($Self.Stats[[StatId]::Attack].Base - $Target.Stats[[StatId]::Defense].Base) *
            (1 + ($Self.Stats[[StatId]::Luck].Base - $Target.Stats[[StatId]::Luck].Base))
        ) * (Get-Random -Minimum 0.07 -Maximum 0.15)
    ))
    $EffectiveDamageCritFactor     = 1.0
    $EffectiveDamageAffinityFactor = 1.0

    $CriticalChance = Get-Random -Minimum 1 -Maximum 1000
    If($CriticalChance -LE $Self.Stats[[StatId]::Luck].Base) {
        $EffectiveDamageCritFactor = 1.5
    }

    # Because this is a Physical attack, there's no need to calculate Affinity damage
    $FinalDamage = [Math]::Round($EffectiveDamageP1 * $EffectiveDamageCritFactor * $EffectiveDamageAffinityFactor)

    # [Int]$EffectiveDamage = $SelfAction.EffectValue - $Target.Stats[[StatId]::Defense].Base
    # [Int]$EffectiveDamage = ($Self.Stats[[StatId]::Attack].Base + $SelfAction.EffectValue) - $Target.Stats[[StatId]::Defense].Base
    [Int]$DecRes = $Target.Stats[[StatId]::HitPoints].DecrementBase(($FinalDamage * -1))
    
    If(0 -NE $DecRes) {
        Return [BattleActionResult]::new(
            [BattleActionResultType]::FailedAttackFailed,
            $Self,
            $Target,
            $FinalDamage
        )
    } Else {
        If($Target -IS [Player]) {
            $Script:ThePlayerBattleStatWindow.HpDrawDirty = $true
        } Else {
            $Script:TheEnemyBattleStatWindow.HpDrawDirty = $true
        }

        If($EffectiveDamageCritFactor -GT 1.0 -AND $EffectiveDamageAffinityFactor -EQ 1.0) {
            # Crit with no Affinity Bonus
            Return [BattleActionResult]::new(
                [BattleActionResultType]::SuccessWithCritical,
                $Self,
                $Target,
                $FinalDamage
            )
        } Elseif($EffectiveDamageCritFactor -EQ 1.0 -AND $EffectiveDamageAffinityFactor -GT 1.0) {
            # Affinity with no Crit Bonus
            Return [BattleActionResult]::new(
                [BattleActionResultType]::SuccessWithAffinityBonus,
                $Self,
                $Target,
                $FinalDamage
            )
        } Elseif($EffectiveDamageCritFactor -GT 1.0 -AND $EffectiveDamageAffinityFactor -GT 1.0) {
            # Crit and Affinity Bonus Applied
            Return [BattleActionResult]::new(
                [BattleActionResultType]::SuccessWithCritAndAffinityBonus,
                $Self,
                $Target,
                $FinalDamage
            )
        }

        Return [BattleActionResult]::new(
            [BattleActionResultType]::Success,
            $Self,
            $Target,
            $FinalDamage
        )
    }
} Else {
    Return [BattleActionResult]::new(
        [BattleActionResultType]::FailedNoUsesRemaining,
        $Self,
        $Target,
        0
    )
}

Class ${1:ClassName} : BattleAction {
    ${1:ClassName}() : base() {
        $this.Name        = "$3"
        $this.Description = "$4"
        $this.Type        = $5
        $this.Effect      = {}
        $this.Uses        = $6
        $this.UsesMax     = $6
        $this.EffectValue = $7
        $this.Chance      = $8
    }
}