WELCOME TO THE DANGER ZONE!!!
CommandWindow::Constructor - Starting the constructor.
CommandWindow::Constructor - 	Setting LeftTop and BottomRight relative to the desired window position.
CommandWindow::Constructor - 	Setting the BorderDrawColors relative to the desired effect for this window (all sides CCWhite24).
CommandWindow::Constructor - 	Settings BorderStrings relative to the desired strings for this window.
CommandWindow::Constructor - 	Calling UpdateDimensions to ensure that measurements are correct.
CommandWindow::Constructor - 	CommandDivDirty to true and CommandHistoryDirty to false.
CommandWindow::Constructor - 	Defining rowBase to 20 and columnBase to 2.
CommandWindow::Constructor - 	Calculating History String Drawing Coordinates.
CommandWindow::Constructor - 	History String Drawing Coordinates have been calculated as follows:
CommandWindow::Constructor - 		Div: (R18, C2)
CommandWindow::Constructor - 		E: (R13, C2)
CommandWindow::Constructor - 		D: (R17, C2)
CommandWindow::Constructor - 		C: (R16, C2)
CommandWindow::Constructor - 		B: (R15, C2)
CommandWindow::Constructor - 		A: (R14, C2)
MessageWindow::Constructor - Starting the constructor.
MessageWindow::Constructor - Calculating the Message Draw Coordinates.
MessageWindow::Constructor - The calculated coordinates are as follows:
MessageWindow::Constructor - Message A: (R22, C2).
MessageWindow::Constructor - Message B: (R23, C2).
MessageWindow::Constructor - Message C: (R24, C2).
MessageWindow::Constructor - Creating the MessageWindowBlank ATString.
MessageWindow::Constructor - Creating the MessageHistory ATString array with a size of 3.
MessageWindow::Constructor - Creating new ATString instances in the MessageHistory array using the appropriate draw coorinates and the MessageWindowBlank UserData as models.
MessageWindow::Constructor - Leaving the constructor.
GameCore::Constructor - Starting the constructor.
GameCore::Constructor - 	Setting up variables.
GameCore::Constructor - 	Leaving the constructor.
GameCore::Run - Starting the Run method.
GameCore::Run - 	Checking to see if the GameRunning flag is true or not.
GameCore::Run - 		GameRunning is true.
GameCore::Run - 		Setting LastFrameTime (0) to CurrentFrameTime (0).
GameCore::Run - 		Setting CurrentFrameTime (0) to the current time in ticks (638160496154685997).
GameCore::Run - 		Checking to see if CurrentFrameTime (6.3816049615471E+17) minus LastFrameTime (0) is GREATER THAN OR EQUAL TO MsPerFrame (33.33333).
GameCore::Run - 		The equation is 6.3816049615471E+17 - 0 >= 33.33333
GameCore::Run - 			The value is GREATER THAN OR EQUAL TO MsPerFrame.
GameCore::Run - 			Set FpsDelta to a new TimeSpan of CurrentFrameTime minus LastFrameTime.
GameCore::Run - 			Call the Logic method.
GameCore::Logic - Starting the Logic method.
GameCore::Logic - Invoking the ScriptBlock for the game state GamePlayScreen
TheGlobalStateBlockTable::GamePlayScreen - Starting the block.
TheGlobalStateBlockTable::GamePlayScreen - Checking to see if the Inventory Window instance isn't null.
TheGlobalStateBlockTable::GamePlayScreen - The instance is already null, skipping.
TheGlobalStateBlockTable::GamePlayScreen - Checking to see if the GPS can be restored from a buffer backup.
TheGlobalStateBlockTable::GamePlayScreen - 	Calling TheStatusWindow.Draw method.
TheGlobalStateBlockTable::GamePlayScreen - 	Calling TheCommandWindow.Draw method.
CommandWindow::Draw - Starting the Draw function.
CommandWindow::Draw - Calling base class Draw function.
CommandWindow::Draw - Checking to see if the CommandDivDirty flag is true.
CommandWindow::Draw - 	CommandDivDirty is true, draw the Command Div to the console.
CommandWindow::Draw - 	Setting CommandDivDirty to false to avoid overdraws.
CommandWindow::Draw - Checking to see if the CommandHistoryDirty flag is true.
TheGlobalStateBlockTable::GamePlayScreen - 	Calling TheSceneWindow.Draw method.
TheGlobalStateBlockTable::GamePlayScreen - 	Calling TheMessageWindow.Draw method.
MessageWindow::Draw - Entering the Draw method.
MessageWindow::Draw - Calling the base class Draw method.
MessageWindow::Draw - Checking to see if MessageADirty is true.
MessageWindow::Draw - Checking to see if MessageBDirty is true.
MessageWindow::Draw - Checking to see if MessageCDirty is true.
MessageWindow::Draw - Leaving the Draw method.
TheGlobalStateBlockTable::GamePlayScreen - 	Calling TheCommandWindow.HandleInput method.
CommandWindow::HandleInput - A regular keypress has been detected. Adding u to Command Actual.
CommandWindow::HandleInput - 	The current value of Command Actual is u.
CommandWindow::HandleInput - A regular keypress has been detected. Adding s to Command Actual.
CommandWindow::HandleInput - 	The current value of Command Actual is us.
CommandWindow::HandleInput - A regular keypress has been detected. Adding e to Command Actual.
CommandWindow::HandleInput - 	The current value of Command Actual is use.
CommandWindow::HandleInput - A regular keypress has been detected. Adding   to Command Actual.
CommandWindow::HandleInput - 	The current value of Command Actual is use .
CommandWindow::HandleInput - A regular keypress has been detected. Adding r to Command Actual.
CommandWindow::HandleInput - 	The current value of Command Actual is use r.
CommandWindow::HandleInput - A regular keypress has been detected. Adding o to Command Actual.
CommandWindow::HandleInput - 	The current value of Command Actual is use ro.
CommandWindow::HandleInput - A regular keypress has been detected. Adding p to Command Actual.
CommandWindow::HandleInput - 	The current value of Command Actual is use rop.
CommandWindow::HandleInput - A regular keypress has been detected. Adding e to Command Actual.
CommandWindow::HandleInput - 	The current value of Command Actual is use rope.
CommandWindow::HandleInput - A regular keypress has been detected. Adding   to Command Actual.
CommandWindow::HandleInput - 	The current value of Command Actual is use rope .
CommandWindow::HandleInput - A regular keypress has been detected. Adding t to Command Actual.
CommandWindow::HandleInput - 	The current value of Command Actual is use rope t.
CommandWindow::HandleInput - A regular keypress has been detected. Adding r to Command Actual.
CommandWindow::HandleInput - 	The current value of Command Actual is use rope tr.
CommandWindow::HandleInput - A regular keypress has been detected. Adding e to Command Actual.
CommandWindow::HandleInput - 	The current value of Command Actual is use rope tre.
CommandWindow::HandleInput - A regular keypress has been detected. Adding e to Command Actual.
CommandWindow::HandleInput - 	The current value of Command Actual is use rope tree.
CommandWindow::InvokeCommandParser - Starting the CommandParser.
CommandWindow::InvokeCommandParser - 	Writing the Command Blank.
CommandWindow::InvokeCommandParser - 	Command Blank has been written.
CommandWindow::InvokeCommandParser - 	Checking to see if Command Actual contains anything.
CommandWindow::InvokeCommandParser - 		It contains data. The current data is use rope tree. Attempting to split the string.
CommandWindow::InvokeCommandParser - 		Split is successful. The split data is Foreach($a in $cmdactSplit){"$a, "}.
CommandWindow::InvokeCommandParser - 		Attempting to find the root command in the Command Table.
CommandWindow::InvokeCommandParser - 		A root command has been identified as 'use' Now checking the length of the split to determine the ScriptBlock invocation style.
CommandWindow::InvokeCommandParser - 			Split length is 3, invoking the root command 'use' with two arguments, 'rope' and 'tree'.
TheCommandTable::use - Starting the block.
TheCommandTable::use - Checking to see if we have the necessary parameters.
TheCommandTable::use - The necessary parameters exist. Continuing the function call.
TheCommandTable::use - Checking to see if the first item exists in the player's inventory.
TheCommandTable::use - rope has been found in the player's inventory.
TheCommandTable::use - Checking to see if the second item exists in the current map tile's object listing.
TheCommandTable::use - tree has been found in the current map tile's object listing.
TheCommandTable::use - Getting references to actuals expressed in the player's inventory and the current map tile's object listing.
TheCommandTable::use - Checking the item use filter on tree to see if rope is a valid item to use on it.
TheCommandTable::use - Filter check has passed, rope can be used on tree.
TheCommandTable::use - Updating the Command History in the Command Window.
CommandWindow::UpdateCommandHistory - Starting to shuffle the Command History around.
CommandWindow::UpdateCommandHistory - Setting History E ('                  ') to History A ('                  ').
CommandWindow::UpdateCommandHistory - Setting History A ('                  ') to History B ('                  ').
CommandWindow::UpdateCommandHistory - Setting History B ('                  ') to History C ('                  ').
CommandWindow::UpdateCommandHistory - Setting History C ('                  ') to History D ('                  ').
CommandWindow::UpdateCommandHistory - Setting History D ('                  ') to Command Actual ('use rope tree').
CommandWindow::UpdateCommandHistory - The current layout of the history is as follows: E:                   , A:                   , B:                   , C:                   , D: use rope tree
CommandWindow::UpdateCommandHistory - Checking to see if the Command Valid flag is true or false.
CommandWindow::UpdateCommandHistory - 	The Command Valid Flag is true. Set the Foreground Color to HistoryEntryValid.
CommandWindow::UpdateCommandHistory - 	Clearing the Command Actual.
CommandWindow::UpdateCommandHistory - Set the CommandHistoryDirty flag to true so the Draw function will draw the strings to the console.
TheCommandTable::use - Using rope on tree.
MTOTree::Effect - Starting the block.
MTOTree::Effect - Checking to see what item passed the filter.
MTOTree::Effect - A Rope is being used on the Tree.
MTOTree::Effect - Write a message to the Message Window that the Rope has been tied to the Tree.
MessageWindow::Draw - Entering the WriteMessage method.
MessageWindow::Draw - Parameter Values: Message: (I've tied the Rope to the Tree), ForegroundColor: (ATForegroundColor24), and Decoration: (ATDecorationNone).
MessageWindow::Draw - Setting Message A UserData, Prefix.Decorations, and Prefix.ForegroundColor to those of Message B.
MessageWindow::Draw - Setting Message B UserData, Prefix.Decorations, and Prefix.ForegroundColor to those of Message C.
MessageWindow::Draw - Setting Message C UserData, Prefix.Decorations, and Prefix.ForegroundColor to those of the parameters passed to this method.
MessageWindow::Draw - Settings the Message Dirty Flags to true to force redraws.
MessageWindow::Draw - Leaving the WriteMessage method.
TheGlobalStateBlockTable::GamePlayScreen - 	Leaving the block.
GameCore::Run - 		GameRunning is true.
GameCore::Run - 		Setting LastFrameTime (0) to CurrentFrameTime (6.3816049615471E+17).
GameCore::Run - 		Setting CurrentFrameTime (6.3816049615471E+17) to the current time in ticks (638160496235443365).
GameCore::Run - 		Checking to see if CurrentFrameTime (6.38160496235453E+17) minus LastFrameTime (6.3816049615471E+17) is GREATER THAN OR EQUAL TO MsPerFrame (33.33333).
GameCore::Run - 		The equation is 6.38160496235453E+17 - 6.3816049615471E+17 >= 33.33333
GameCore::Run - 			The value is GREATER THAN OR EQUAL TO MsPerFrame.
GameCore::Run - 			Set FpsDelta to a new TimeSpan of CurrentFrameTime minus LastFrameTime.
GameCore::Run - 			Call the Logic method.
GameCore::Logic - Starting the Logic method.
GameCore::Logic - Invoking the ScriptBlock for the game state GamePlayScreen
TheGlobalStateBlockTable::GamePlayScreen - Starting the block.
TheGlobalStateBlockTable::GamePlayScreen - Checking to see if the Inventory Window instance isn't null.
TheGlobalStateBlockTable::GamePlayScreen - The instance is already null, skipping.
TheGlobalStateBlockTable::GamePlayScreen - Checking to see if the GPS can be restored from a buffer backup.
TheGlobalStateBlockTable::GamePlayScreen - 	Calling TheStatusWindow.Draw method.
TheGlobalStateBlockTable::GamePlayScreen - 	Calling TheCommandWindow.Draw method.
CommandWindow::Draw - Starting the Draw function.
CommandWindow::Draw - Calling base class Draw function.
CommandWindow::Draw - Checking to see if the CommandDivDirty flag is true.
CommandWindow::Draw - Checking to see if the CommandHistoryDirty flag is true.
CommandWindow::Draw - 	CommandHistoryDirty is true, draw the Command History strings to the console.
CommandWindow::Draw - 	Setting the CommandHistoryDirty flag to false.
TheGlobalStateBlockTable::GamePlayScreen - 	Calling TheSceneWindow.Draw method.
TheGlobalStateBlockTable::GamePlayScreen - 	Calling TheMessageWindow.Draw method.
MessageWindow::Draw - Entering the Draw method.
MessageWindow::Draw - Calling the base class Draw method.
MessageWindow::Draw - Checking to see if MessageADirty is true.
MessageWindow::Draw - MessageADirty is true, redrawing Message A to the window at its predefined coordinates (blank first, then string).
MessageWindow::Draw - Setting MessageADirty to false.
MessageWindow::Draw - Checking to see if MessageBDirty is true.
MessageWindow::Draw - MessageBDirty is true, redrawing Message B to the window at its predefined coordinates (blank first, then string).
MessageWindow::Draw - Setting MessageBDirty to false.
MessageWindow::Draw - Checking to see if MessageCDirty is true.
MessageWindow::Draw - MessageCDirty is true, redrawing Message C to the window at its predefined coordinates (blank first, then string).
MessageWindow::Draw - Setting MessageCDirty to false.
MessageWindow::Draw - Leaving the Draw method.
TheGlobalStateBlockTable::GamePlayScreen - 	Calling TheCommandWindow.HandleInput method.
CommandWindow::HandleInput - A regular keypress has been detected. Adding u to Command Actual.
CommandWindow::HandleInput - 	The current value of Command Actual is u.
CommandWindow::HandleInput - A regular keypress has been detected. Adding s to Command Actual.
CommandWindow::HandleInput - 	The current value of Command Actual is us.
CommandWindow::HandleInput - A regular keypress has been detected. Adding e to Command Actual.
CommandWindow::HandleInput - 	The current value of Command Actual is use.
CommandWindow::HandleInput - A regular keypress has been detected. Adding   to Command Actual.
CommandWindow::HandleInput - 	The current value of Command Actual is use .
CommandWindow::HandleInput - A regular keypress has been detected. Adding f to Command Actual.
CommandWindow::HandleInput - 	The current value of Command Actual is use f.
CommandWindow::HandleInput - A regular keypress has been detected. Adding o to Command Actual.
CommandWindow::HandleInput - 	The current value of Command Actual is use fo.
CommandWindow::HandleInput - A regular keypress has been detected. Adding r to Command Actual.
CommandWindow::HandleInput - 	The current value of Command Actual is use for.
CommandWindow::HandleInput - A regular keypress has been detected. Adding k to Command Actual.
CommandWindow::HandleInput - 	The current value of Command Actual is use fork.
CommandWindow::InvokeCommandParser - Starting the CommandParser.
CommandWindow::InvokeCommandParser - 	Writing the Command Blank.
CommandWindow::InvokeCommandParser - 	Command Blank has been written.
CommandWindow::InvokeCommandParser - 	Checking to see if Command Actual contains anything.
CommandWindow::InvokeCommandParser - 		It contains data. The current data is use fork. Attempting to split the string.
CommandWindow::InvokeCommandParser - 		Split is successful. The split data is Foreach($a in $cmdactSplit){"$a, "}.
CommandWindow::InvokeCommandParser - 		Attempting to find the root command in the Command Table.
CommandWindow::InvokeCommandParser - 		A root command has been identified as 'use' Now checking the length of the split to determine the ScriptBlock invocation style.
CommandWindow::InvokeCommandParser - 			Split length is 2, invoking the root command 'use' with one argument 'fork'.
TheCommandTable::use - Starting the block.
TheCommandTable::use - Checking to see if we have the necessary parameters.
TheCommandTable::use - Parameter a0 is available but a1 is NOT.
TheCommandTable::use - This is an invalid command structure error.
TheCommandTable::use - Updating the Command History in the Command Window.
CommandWindow::UpdateCommandHistory - Starting to shuffle the Command History around.
CommandWindow::UpdateCommandHistory - Setting History E ('                  ') to History A ('                  ').
CommandWindow::UpdateCommandHistory - Setting History A ('                  ') to History B ('                  ').
CommandWindow::UpdateCommandHistory - Setting History B ('                  ') to History C ('                  ').
CommandWindow::UpdateCommandHistory - Setting History C ('                  ') to History D ('use rope tree').
CommandWindow::UpdateCommandHistory - Setting History D ('use rope tree') to Command Actual ('use fork').
CommandWindow::UpdateCommandHistory - The current layout of the history is as follows: E:                   , A:                   , B:                   , C: use rope tree, D: use fork
CommandWindow::UpdateCommandHistory - Checking to see if the Command Valid flag is true or false.
CommandWindow::UpdateCommandHistory - 	The Command Valid Flag is false. Set the Foreground Color to HistoryEntryError and set the Decoration to Blink.
CommandWindow::UpdateCommandHistory - 	Clearing the Command Actual.
CommandWindow::UpdateCommandHistory - Set the CommandHistoryDirty flag to true so the Draw function will draw the strings to the console.
TheCommandTable::use - Checking to see if fork is in the Player's Inventory.
TheCommandTable::use - It's not in the Player's Inventory.
TheCommandTable::use - Writing a specific message to the Message Window.
MessageWindow::Draw - Entering the WriteMessage method.
MessageWindow::Draw - Parameter Values: Message: (I have no idea how to use a(n) fork.), ForegroundColor: (ATForegroundColor24), and Decoration: (ATDecorationNone).
MessageWindow::Draw - Setting Message A UserData, Prefix.Decorations, and Prefix.ForegroundColor to those of Message B.
MessageWindow::Draw - Setting Message B UserData, Prefix.Decorations, and Prefix.ForegroundColor to those of Message C.
MessageWindow::Draw - Setting Message C UserData, Prefix.Decorations, and Prefix.ForegroundColor to those of the parameters passed to this method.
MessageWindow::Draw - Settings the Message Dirty Flags to true to force redraws.
MessageWindow::Draw - Leaving the WriteMessage method.
TheGlobalStateBlockTable::GamePlayScreen - 	Leaving the block.
GameCore::Run - 		GameRunning is true.
GameCore::Run - 		Setting LastFrameTime (6.3816049615471E+17) to CurrentFrameTime (6.38160496235453E+17).
GameCore::Run - 		Setting CurrentFrameTime (6.38160496235453E+17) to the current time in ticks (638160496264058570).
GameCore::Run - 		Checking to see if CurrentFrameTime (6.38160496264069E+17) minus LastFrameTime (6.38160496235453E+17) is GREATER THAN OR EQUAL TO MsPerFrame (33.33333).
GameCore::Run - 		The equation is 6.38160496264069E+17 - 6.38160496235453E+17 >= 33.33333
GameCore::Run - 			The value is GREATER THAN OR EQUAL TO MsPerFrame.
GameCore::Run - 			Set FpsDelta to a new TimeSpan of CurrentFrameTime minus LastFrameTime.
GameCore::Run - 			Call the Logic method.
GameCore::Logic - Starting the Logic method.
GameCore::Logic - Invoking the ScriptBlock for the game state GamePlayScreen
TheGlobalStateBlockTable::GamePlayScreen - Starting the block.
TheGlobalStateBlockTable::GamePlayScreen - Checking to see if the Inventory Window instance isn't null.
TheGlobalStateBlockTable::GamePlayScreen - The instance is already null, skipping.
TheGlobalStateBlockTable::GamePlayScreen - Checking to see if the GPS can be restored from a buffer backup.
TheGlobalStateBlockTable::GamePlayScreen - 	Calling TheStatusWindow.Draw method.
TheGlobalStateBlockTable::GamePlayScreen - 	Calling TheCommandWindow.Draw method.
CommandWindow::Draw - Starting the Draw function.
CommandWindow::Draw - Calling base class Draw function.
CommandWindow::Draw - Checking to see if the CommandDivDirty flag is true.
CommandWindow::Draw - Checking to see if the CommandHistoryDirty flag is true.
CommandWindow::Draw - 	CommandHistoryDirty is true, draw the Command History strings to the console.
CommandWindow::Draw - 	Setting the CommandHistoryDirty flag to false.
TheGlobalStateBlockTable::GamePlayScreen - 	Calling TheSceneWindow.Draw method.
TheGlobalStateBlockTable::GamePlayScreen - 	Calling TheMessageWindow.Draw method.
MessageWindow::Draw - Entering the Draw method.
MessageWindow::Draw - Calling the base class Draw method.
MessageWindow::Draw - Checking to see if MessageADirty is true.
MessageWindow::Draw - MessageADirty is true, redrawing Message A to the window at its predefined coordinates (blank first, then string).
MessageWindow::Draw - Setting MessageADirty to false.
MessageWindow::Draw - Checking to see if MessageBDirty is true.
MessageWindow::Draw - MessageBDirty is true, redrawing Message B to the window at its predefined coordinates (blank first, then string).
MessageWindow::Draw - Setting MessageBDirty to false.
MessageWindow::Draw - Checking to see if MessageCDirty is true.
MessageWindow::Draw - MessageCDirty is true, redrawing Message C to the window at its predefined coordinates (blank first, then string).
MessageWindow::Draw - Setting MessageCDirty to false.
MessageWindow::Draw - Leaving the Draw method.
TheGlobalStateBlockTable::GamePlayScreen - 	Calling TheCommandWindow.HandleInput method.
CommandWindow::HandleInput - A regular keypress has been detected. Adding u to Command Actual.
CommandWindow::HandleInput - 	The current value of Command Actual is u.
CommandWindow::HandleInput - A regular keypress has been detected. Adding s to Command Actual.
CommandWindow::HandleInput - 	The current value of Command Actual is us.
CommandWindow::HandleInput - A regular keypress has been detected. Adding e to Command Actual.
CommandWindow::HandleInput - 	The current value of Command Actual is use.
CommandWindow::HandleInput - A regular keypress has been detected. Adding   to Command Actual.
CommandWindow::HandleInput - 	The current value of Command Actual is use .
CommandWindow::HandleInput - A regular keypress has been detected. Adding a to Command Actual.
CommandWindow::HandleInput - 	The current value of Command Actual is use a.
CommandWindow::HandleInput - A regular keypress has been detected. Adding p to Command Actual.
CommandWindow::HandleInput - 	The current value of Command Actual is use ap.
CommandWindow::HandleInput - A regular keypress has been detected. Adding p to Command Actual.
CommandWindow::HandleInput - 	The current value of Command Actual is use app.
CommandWindow::HandleInput - A regular keypress has been detected. Adding l to Command Actual.
CommandWindow::HandleInput - 	The current value of Command Actual is use appl.
CommandWindow::HandleInput - A regular keypress has been detected. Adding e to Command Actual.
CommandWindow::HandleInput - 	The current value of Command Actual is use apple.
CommandWindow::InvokeCommandParser - Starting the CommandParser.
CommandWindow::InvokeCommandParser - 	Writing the Command Blank.
CommandWindow::InvokeCommandParser - 	Command Blank has been written.
CommandWindow::InvokeCommandParser - 	Checking to see if Command Actual contains anything.
CommandWindow::InvokeCommandParser - 		It contains data. The current data is use apple. Attempting to split the string.
CommandWindow::InvokeCommandParser - 		Split is successful. The split data is Foreach($a in $cmdactSplit){"$a, "}.
CommandWindow::InvokeCommandParser - 		Attempting to find the root command in the Command Table.
CommandWindow::InvokeCommandParser - 		A root command has been identified as 'use' Now checking the length of the split to determine the ScriptBlock invocation style.
CommandWindow::InvokeCommandParser - 			Split length is 2, invoking the root command 'use' with one argument 'apple'.
TheCommandTable::use - Starting the block.
TheCommandTable::use - Checking to see if we have the necessary parameters.
TheCommandTable::use - Parameter a0 is available but a1 is NOT.
TheCommandTable::use - This is an invalid command structure error.
TheCommandTable::use - Updating the Command History in the Command Window.
CommandWindow::UpdateCommandHistory - Starting to shuffle the Command History around.
CommandWindow::UpdateCommandHistory - Setting History E ('                  ') to History A ('                  ').
CommandWindow::UpdateCommandHistory - Setting History A ('                  ') to History B ('                  ').
CommandWindow::UpdateCommandHistory - Setting History B ('                  ') to History C ('use rope tree').
CommandWindow::UpdateCommandHistory - Setting History C ('use rope tree') to History D ('use fork').
CommandWindow::UpdateCommandHistory - Setting History D ('use fork') to Command Actual ('use apple').
CommandWindow::UpdateCommandHistory - The current layout of the history is as follows: E:                   , A:                   , B: use rope tree, C: use fork, D: use apple
CommandWindow::UpdateCommandHistory - Checking to see if the Command Valid flag is true or false.
CommandWindow::UpdateCommandHistory - 	The Command Valid Flag is false. Set the Foreground Color to HistoryEntryError and set the Decoration to Blink.
CommandWindow::UpdateCommandHistory - 	Clearing the Command Actual.
CommandWindow::UpdateCommandHistory - Set the CommandHistoryDirty flag to true so the Draw function will draw the strings to the console.
TheCommandTable::use - Checking to see if apple is in the Player's Inventory.
TheCommandTable::use - It's in the Player's Inventory.
TheCommandTable::use - Writing a specific message to the Message Window.
MessageWindow::Draw - Entering the WriteMessage method.
MessageWindow::Draw - Parameter Values: Message: (You need to tell me what you want to use the apple on.), ForegroundColor: (ATForegroundColor24), and Decoration: (ATDecorationNone).
MessageWindow::Draw - Setting Message A UserData, Prefix.Decorations, and Prefix.ForegroundColor to those of Message B.
MessageWindow::Draw - Setting Message B UserData, Prefix.Decorations, and Prefix.ForegroundColor to those of Message C.
MessageWindow::Draw - Setting Message C UserData, Prefix.Decorations, and Prefix.ForegroundColor to those of the parameters passed to this method.
MessageWindow::Draw - Settings the Message Dirty Flags to true to force redraws.
MessageWindow::Draw - Leaving the WriteMessage method.
TheGlobalStateBlockTable::GamePlayScreen - 	Leaving the block.
GameCore::Run - 		GameRunning is true.
GameCore::Run - 		Setting LastFrameTime (6.38160496235453E+17) to CurrentFrameTime (6.38160496264069E+17).
GameCore::Run - 		Setting CurrentFrameTime (6.38160496264069E+17) to the current time in ticks (638160496321969592).
GameCore::Run - 		Checking to see if CurrentFrameTime (6.38160496321982E+17) minus LastFrameTime (6.38160496264069E+17) is GREATER THAN OR EQUAL TO MsPerFrame (33.33333).
GameCore::Run - 		The equation is 6.38160496321982E+17 - 6.38160496264069E+17 >= 33.33333
GameCore::Run - 			The value is GREATER THAN OR EQUAL TO MsPerFrame.
GameCore::Run - 			Set FpsDelta to a new TimeSpan of CurrentFrameTime minus LastFrameTime.
GameCore::Run - 			Call the Logic method.
GameCore::Logic - Starting the Logic method.
GameCore::Logic - Invoking the ScriptBlock for the game state GamePlayScreen
TheGlobalStateBlockTable::GamePlayScreen - Starting the block.
TheGlobalStateBlockTable::GamePlayScreen - Checking to see if the Inventory Window instance isn't null.
TheGlobalStateBlockTable::GamePlayScreen - The instance is already null, skipping.
TheGlobalStateBlockTable::GamePlayScreen - Checking to see if the GPS can be restored from a buffer backup.
TheGlobalStateBlockTable::GamePlayScreen - 	Calling TheStatusWindow.Draw method.
TheGlobalStateBlockTable::GamePlayScreen - 	Calling TheCommandWindow.Draw method.
CommandWindow::Draw - Starting the Draw function.
CommandWindow::Draw - Calling base class Draw function.
CommandWindow::Draw - Checking to see if the CommandDivDirty flag is true.
CommandWindow::Draw - Checking to see if the CommandHistoryDirty flag is true.
CommandWindow::Draw - 	CommandHistoryDirty is true, draw the Command History strings to the console.
CommandWindow::Draw - 	Setting the CommandHistoryDirty flag to false.
TheGlobalStateBlockTable::GamePlayScreen - 	Calling TheSceneWindow.Draw method.
TheGlobalStateBlockTable::GamePlayScreen - 	Calling TheMessageWindow.Draw method.
MessageWindow::Draw - Entering the Draw method.
MessageWindow::Draw - Calling the base class Draw method.
MessageWindow::Draw - Checking to see if MessageADirty is true.
MessageWindow::Draw - MessageADirty is true, redrawing Message A to the window at its predefined coordinates (blank first, then string).
MessageWindow::Draw - Setting MessageADirty to false.
MessageWindow::Draw - Checking to see if MessageBDirty is true.
MessageWindow::Draw - MessageBDirty is true, redrawing Message B to the window at its predefined coordinates (blank first, then string).
MessageWindow::Draw - Setting MessageBDirty to false.
MessageWindow::Draw - Checking to see if MessageCDirty is true.
MessageWindow::Draw - MessageCDirty is true, redrawing Message C to the window at its predefined coordinates (blank first, then string).
MessageWindow::Draw - Setting MessageCDirty to false.
MessageWindow::Draw - Leaving the Draw method.
TheGlobalStateBlockTable::GamePlayScreen - 	Calling TheCommandWindow.HandleInput method.
CommandWindow::HandleInput - A regular keypress has been detected. Adding u to Command Actual.
CommandWindow::HandleInput - 	The current value of Command Actual is u.
CommandWindow::HandleInput - A regular keypress has been detected. Adding s to Command Actual.
CommandWindow::HandleInput - 	The current value of Command Actual is us.
CommandWindow::HandleInput - A regular keypress has been detected. Adding e to Command Actual.
CommandWindow::HandleInput - 	The current value of Command Actual is use.
CommandWindow::HandleInput - Backspace Key has been pressed. Virtual Key Code value is 8
CommandWindow::HandleInput - 	Obtaining current Cursor Position X (Row) Value as FPX. The current value is 3
CommandWindow::HandleInput - 	Comparing FPX against the Default Coordinates X (Row). The default value is 1, and FPX is 3.
CommandWindow::HandleInput - 		FPX is GREATER THAN the Default Coordinates X (Row).
CommandWindow::HandleInput - 		The character that would be deleted here is e.
CommandWindow::HandleInput - 		Performing character deletion from console window.
CommandWindow::HandleInput - 		The current value of Command Actual is use. Attempting to delete the last character.
CommandWindow::HandleInput - 		The last character has been deleted. The current value of Command Actual is us.
CommandWindow::HandleInput - Backspace Key has been pressed. Virtual Key Code value is 8
CommandWindow::HandleInput - 	Obtaining current Cursor Position X (Row) Value as FPX. The current value is 2
CommandWindow::HandleInput - 	Comparing FPX against the Default Coordinates X (Row). The default value is 1, and FPX is 2.
CommandWindow::HandleInput - 		FPX is GREATER THAN the Default Coordinates X (Row).
CommandWindow::HandleInput - 		The character that would be deleted here is s.
CommandWindow::HandleInput - 		Performing character deletion from console window.
CommandWindow::HandleInput - 		The current value of Command Actual is us. Attempting to delete the last character.
CommandWindow::HandleInput - 		The last character has been deleted. The current value of Command Actual is u.
CommandWindow::HandleInput - Backspace Key has been pressed. Virtual Key Code value is 8
CommandWindow::HandleInput - 	Obtaining current Cursor Position X (Row) Value as FPX. The current value is 1
CommandWindow::HandleInput - 	Comparing FPX against the Default Coordinates X (Row). The default value is 1, and FPX is 1.
CommandWindow::HandleInput - 		FPX is EQUAL TO the Default Coordinates X (Row).
CommandWindow::HandleInput - 		The character that would be deleted here is u.
CommandWindow::HandleInput - 		The current value of Command Actual is u. Attempting to delete the last character.
CommandWindow::HandleInput - 		The last character has been deleted. The current value of Command Actual is .
CommandWindow::HandleInput - A regular keypress has been detected. Adding l to Command Actual.
CommandWindow::HandleInput - 	The current value of Command Actual is l.
CommandWindow::InvokeCommandParser - Starting the CommandParser.
CommandWindow::InvokeCommandParser - 	Writing the Command Blank.
CommandWindow::InvokeCommandParser - 	Command Blank has been written.
CommandWindow::InvokeCommandParser - 	Checking to see if Command Actual contains anything.
CommandWindow::InvokeCommandParser - 		It contains data. The current data is l. Attempting to split the string.
CommandWindow::InvokeCommandParser - 		Split is successful. The split data is Foreach($a in $cmdactSplit){"$a, "}.
CommandWindow::InvokeCommandParser - 		Attempting to find the root command in the Command Table.
CommandWindow::InvokeCommandParser - 		A root command has been identified as 'l' Now checking the length of the split to determine the ScriptBlock invocation style.
CommandWindow::InvokeCommandParser - 			Split length is 1, invoking the root command 'l' without arguments.
CommandWindow::UpdateCommandHistory - Starting to shuffle the Command History around.
CommandWindow::UpdateCommandHistory - Setting History E ('                  ') to History A ('                  ').
CommandWindow::UpdateCommandHistory - Setting History A ('                  ') to History B ('use rope tree').
CommandWindow::UpdateCommandHistory - Setting History B ('use rope tree') to History C ('use fork').
CommandWindow::UpdateCommandHistory - Setting History C ('use fork') to History D ('use apple').
CommandWindow::UpdateCommandHistory - Setting History D ('use apple') to Command Actual ('l').
CommandWindow::UpdateCommandHistory - The current layout of the history is as follows: E:                   , A: use rope tree, B: use fork, C: use apple, D: l
CommandWindow::UpdateCommandHistory - Checking to see if the Command Valid flag is true or false.
CommandWindow::UpdateCommandHistory - 	The Command Valid Flag is true. Set the Foreground Color to HistoryEntryValid.
CommandWindow::UpdateCommandHistory - 	Clearing the Command Actual.
CommandWindow::UpdateCommandHistory - Set the CommandHistoryDirty flag to true so the Draw function will draw the strings to the console.
MessageWindow::Draw - Entering the WriteMessage method.
MessageWindow::Draw - Parameter Values: Message: (I can see the following things here:), ForegroundColor: (ATForegroundColor24), and Decoration: (ATDecorationNone).
MessageWindow::Draw - Setting Message A UserData, Prefix.Decorations, and Prefix.ForegroundColor to those of Message B.
MessageWindow::Draw - Setting Message B UserData, Prefix.Decorations, and Prefix.ForegroundColor to those of Message C.
MessageWindow::Draw - Setting Message C UserData, Prefix.Decorations, and Prefix.ForegroundColor to those of the parameters passed to this method.
MessageWindow::Draw - Settings the Message Dirty Flags to true to force redraws.
MessageWindow::Draw - Leaving the WriteMessage method.
MessageWindow::Draw - Entering the WriteMessage method.
MessageWindow::Draw - Parameter Values: Message: (Apple, Tree, Ladder, Rope, Stairs, Pole), ForegroundColor: (ATForegroundColor24), and Decoration: (ATDecorationNone).
MessageWindow::Draw - Setting Message A UserData, Prefix.Decorations, and Prefix.ForegroundColor to those of Message B.
MessageWindow::Draw - Setting Message B UserData, Prefix.Decorations, and Prefix.ForegroundColor to those of Message C.
MessageWindow::Draw - Setting Message C UserData, Prefix.Decorations, and Prefix.ForegroundColor to those of the parameters passed to this method.
MessageWindow::Draw - Settings the Message Dirty Flags to true to force redraws.
MessageWindow::Draw - Leaving the WriteMessage method.
TheGlobalStateBlockTable::GamePlayScreen - 	Leaving the block.
GameCore::Run - 		GameRunning is true.
GameCore::Run - 		Setting LastFrameTime (6.38160496264069E+17) to CurrentFrameTime (6.38160496321982E+17).
GameCore::Run - 		Setting CurrentFrameTime (6.38160496321982E+17) to the current time in ticks (638160496371968097).
GameCore::Run - 		Checking to see if CurrentFrameTime (6.38160496371985E+17) minus LastFrameTime (6.38160496321982E+17) is GREATER THAN OR EQUAL TO MsPerFrame (33.33333).
GameCore::Run - 		The equation is 6.38160496371985E+17 - 6.38160496321982E+17 >= 33.33333
GameCore::Run - 			The value is GREATER THAN OR EQUAL TO MsPerFrame.
GameCore::Run - 			Set FpsDelta to a new TimeSpan of CurrentFrameTime minus LastFrameTime.
GameCore::Run - 			Call the Logic method.
GameCore::Logic - Starting the Logic method.
GameCore::Logic - Invoking the ScriptBlock for the game state GamePlayScreen
TheGlobalStateBlockTable::GamePlayScreen - Starting the block.
TheGlobalStateBlockTable::GamePlayScreen - Checking to see if the Inventory Window instance isn't null.
TheGlobalStateBlockTable::GamePlayScreen - The instance is already null, skipping.
TheGlobalStateBlockTable::GamePlayScreen - Checking to see if the GPS can be restored from a buffer backup.
TheGlobalStateBlockTable::GamePlayScreen - 	Calling TheStatusWindow.Draw method.
TheGlobalStateBlockTable::GamePlayScreen - 	Calling TheCommandWindow.Draw method.
CommandWindow::Draw - Starting the Draw function.
CommandWindow::Draw - Calling base class Draw function.
CommandWindow::Draw - Checking to see if the CommandDivDirty flag is true.
CommandWindow::Draw - Checking to see if the CommandHistoryDirty flag is true.
CommandWindow::Draw - 	CommandHistoryDirty is true, draw the Command History strings to the console.
CommandWindow::Draw - 	Setting the CommandHistoryDirty flag to false.
TheGlobalStateBlockTable::GamePlayScreen - 	Calling TheSceneWindow.Draw method.
TheGlobalStateBlockTable::GamePlayScreen - 	Calling TheMessageWindow.Draw method.
MessageWindow::Draw - Entering the Draw method.
MessageWindow::Draw - Calling the base class Draw method.
MessageWindow::Draw - Checking to see if MessageADirty is true.
MessageWindow::Draw - MessageADirty is true, redrawing Message A to the window at its predefined coordinates (blank first, then string).
MessageWindow::Draw - Setting MessageADirty to false.
MessageWindow::Draw - Checking to see if MessageBDirty is true.
MessageWindow::Draw - MessageBDirty is true, redrawing Message B to the window at its predefined coordinates (blank first, then string).
MessageWindow::Draw - Setting MessageBDirty to false.
MessageWindow::Draw - Checking to see if MessageCDirty is true.
MessageWindow::Draw - MessageCDirty is true, redrawing Message C to the window at its predefined coordinates (blank first, then string).
MessageWindow::Draw - Setting MessageCDirty to false.
MessageWindow::Draw - Leaving the Draw method.
TheGlobalStateBlockTable::GamePlayScreen - 	Calling TheCommandWindow.HandleInput method.
CommandWindow::HandleInput - A regular keypress has been detected. Adding t to Command Actual.
CommandWindow::HandleInput - 	The current value of Command Actual is t.
CommandWindow::HandleInput - A regular keypress has been detected. Adding a to Command Actual.
CommandWindow::HandleInput - 	The current value of Command Actual is ta.
CommandWindow::HandleInput - A regular keypress has been detected. Adding k to Command Actual.
CommandWindow::HandleInput - 	The current value of Command Actual is tak.
CommandWindow::HandleInput - A regular keypress has been detected. Adding e to Command Actual.
CommandWindow::HandleInput - 	The current value of Command Actual is take.
CommandWindow::HandleInput - A regular keypress has been detected. Adding   to Command Actual.
CommandWindow::HandleInput - 	The current value of Command Actual is take .
CommandWindow::HandleInput - A regular keypress has been detected. Adding a to Command Actual.
CommandWindow::HandleInput - 	The current value of Command Actual is take a.
CommandWindow::HandleInput - A regular keypress has been detected. Adding p to Command Actual.
CommandWindow::HandleInput - 	The current value of Command Actual is take ap.
CommandWindow::HandleInput - A regular keypress has been detected. Adding p to Command Actual.
CommandWindow::HandleInput - 	The current value of Command Actual is take app.
CommandWindow::HandleInput - A regular keypress has been detected. Adding l to Command Actual.
CommandWindow::HandleInput - 	The current value of Command Actual is take appl.
CommandWindow::HandleInput - A regular keypress has been detected. Adding e to Command Actual.
CommandWindow::HandleInput - 	The current value of Command Actual is take apple.
CommandWindow::InvokeCommandParser - Starting the CommandParser.
CommandWindow::InvokeCommandParser - 	Writing the Command Blank.
CommandWindow::InvokeCommandParser - 	Command Blank has been written.
CommandWindow::InvokeCommandParser - 	Checking to see if Command Actual contains anything.
CommandWindow::InvokeCommandParser - 		It contains data. The current data is take apple. Attempting to split the string.
CommandWindow::InvokeCommandParser - 		Split is successful. The split data is Foreach($a in $cmdactSplit){"$a, "}.
CommandWindow::InvokeCommandParser - 		Attempting to find the root command in the Command Table.
CommandWindow::InvokeCommandParser - 		A root command has been identified as 'take' Now checking the length of the split to determine the ScriptBlock invocation style.
CommandWindow::InvokeCommandParser - 			Split length is 2, invoking the root command 'take' with one argument 'apple'.
TheCommandTable::take - Starting the block.
TheCommandTable::take - Because of the nature of this block, we're just going to call the function on the Command Window.
CommandWindow::InvokeGetAction - Starting the function.
CommandWindow::InvokeGetAction - Getting a reference to the current Map Tile's Object Listing.
CommandWindow::InvokeGetAction - Checking to see if the length of the reference is LESS THAN OR EQUAL TO zero.
CommandWindow::InvokeGetAction - The length of the reference is at least 1.
CommandWindow::InvokeGetAction - Iterating through the reference collection to see if we can find a name match.
CommandWindow::InvokeGetAction - The Item Name we're looking for is apple.
CommandWindow::InvokeGetAction - The current iteration's name is Apple.
CommandWindow::InvokeGetAction - Checking to see if these match.
CommandWindow::InvokeGetAction - A match has been found.
CommandWindow::InvokeGetAction - Checking to see if this Item can be added to the Player's Inventory.
CommandWindow::InvokeGetAction - It can. Copying the current item into the Player's Inventory collection.
CommandWindow::InvokeGetAction - Attempting to remove this item from the current Map Tile's Object Listing.
CommandWindow::InvokeGetAction - Checking to see if the removal was successful or not.
CommandWindow::InvokeGetAction - The removal was successful.
CommandWindow::InvokeGetAction - Updating the Command Window History and Message Window History.
CommandWindow::UpdateCommandHistory - Starting to shuffle the Command History around.
CommandWindow::UpdateCommandHistory - Setting History E ('                  ') to History A ('use rope tree').
CommandWindow::UpdateCommandHistory - Setting History A ('use rope tree') to History B ('use fork').
CommandWindow::UpdateCommandHistory - Setting History B ('use fork') to History C ('use apple').
CommandWindow::UpdateCommandHistory - Setting History C ('use apple') to History D ('l').
CommandWindow::UpdateCommandHistory - Setting History D ('l') to Command Actual ('take apple').
CommandWindow::UpdateCommandHistory - The current layout of the history is as follows: E: use rope tree, A: use fork, B: use apple, C: l, D: take apple
CommandWindow::UpdateCommandHistory - Checking to see if the Command Valid flag is true or false.
CommandWindow::UpdateCommandHistory - 	The Command Valid Flag is true. Set the Foreground Color to HistoryEntryValid.
CommandWindow::UpdateCommandHistory - 	Clearing the Command Actual.
CommandWindow::UpdateCommandHistory - Set the CommandHistoryDirty flag to true so the Draw function will draw the strings to the console.
MessageWindow::Draw - Entering the WriteMessage method.
MessageWindow::Draw - Parameter Values: Message: (I've taken the apple and put it in my pocket.), ForegroundColor: (ATForegroundColor24), and Decoration: (ATDecorationNone).
MessageWindow::Draw - Setting Message A UserData, Prefix.Decorations, and Prefix.ForegroundColor to those of Message B.
MessageWindow::Draw - Setting Message B UserData, Prefix.Decorations, and Prefix.ForegroundColor to those of Message C.
MessageWindow::Draw - Setting Message C UserData, Prefix.Decorations, and Prefix.ForegroundColor to those of the parameters passed to this method.
MessageWindow::Draw - Settings the Message Dirty Flags to true to force redraws.
MessageWindow::Draw - Leaving the WriteMessage method.
CommandWindow::InvokeGetAction - Leaving the function.
TheCommandTable::take - Leaving the block.
TheGlobalStateBlockTable::GamePlayScreen - 	Leaving the block.
GameCore::Run - 		GameRunning is true.
GameCore::Run - 		Setting LastFrameTime (6.38160496321982E+17) to CurrentFrameTime (6.38160496371985E+17).
GameCore::Run - 		Setting CurrentFrameTime (6.38160496371985E+17) to the current time in ticks (638160496400522261).
GameCore::Run - 		Checking to see if CurrentFrameTime (6.38160496400531E+17) minus LastFrameTime (6.38160496371985E+17) is GREATER THAN OR EQUAL TO MsPerFrame (33.33333).
GameCore::Run - 		The equation is 6.38160496400531E+17 - 6.38160496371985E+17 >= 33.33333
GameCore::Run - 			The value is GREATER THAN OR EQUAL TO MsPerFrame.
GameCore::Run - 			Set FpsDelta to a new TimeSpan of CurrentFrameTime minus LastFrameTime.
GameCore::Run - 			Call the Logic method.
GameCore::Logic - Starting the Logic method.
GameCore::Logic - Invoking the ScriptBlock for the game state GamePlayScreen
TheGlobalStateBlockTable::GamePlayScreen - Starting the block.
TheGlobalStateBlockTable::GamePlayScreen - Checking to see if the Inventory Window instance isn't null.
TheGlobalStateBlockTable::GamePlayScreen - The instance is already null, skipping.
TheGlobalStateBlockTable::GamePlayScreen - Checking to see if the GPS can be restored from a buffer backup.
TheGlobalStateBlockTable::GamePlayScreen - 	Calling TheStatusWindow.Draw method.
TheGlobalStateBlockTable::GamePlayScreen - 	Calling TheCommandWindow.Draw method.
CommandWindow::Draw - Starting the Draw function.
CommandWindow::Draw - Calling base class Draw function.
CommandWindow::Draw - Checking to see if the CommandDivDirty flag is true.
CommandWindow::Draw - Checking to see if the CommandHistoryDirty flag is true.
CommandWindow::Draw - 	CommandHistoryDirty is true, draw the Command History strings to the console.
CommandWindow::Draw - 	Setting the CommandHistoryDirty flag to false.
TheGlobalStateBlockTable::GamePlayScreen - 	Calling TheSceneWindow.Draw method.
TheGlobalStateBlockTable::GamePlayScreen - 	Calling TheMessageWindow.Draw method.
MessageWindow::Draw - Entering the Draw method.
MessageWindow::Draw - Calling the base class Draw method.
MessageWindow::Draw - Checking to see if MessageADirty is true.
MessageWindow::Draw - MessageADirty is true, redrawing Message A to the window at its predefined coordinates (blank first, then string).
MessageWindow::Draw - Setting MessageADirty to false.
MessageWindow::Draw - Checking to see if MessageBDirty is true.
MessageWindow::Draw - MessageBDirty is true, redrawing Message B to the window at its predefined coordinates (blank first, then string).
MessageWindow::Draw - Setting MessageBDirty to false.
MessageWindow::Draw - Checking to see if MessageCDirty is true.
MessageWindow::Draw - MessageCDirty is true, redrawing Message C to the window at its predefined coordinates (blank first, then string).
MessageWindow::Draw - Setting MessageCDirty to false.
MessageWindow::Draw - Leaving the Draw method.
TheGlobalStateBlockTable::GamePlayScreen - 	Calling TheCommandWindow.HandleInput method.
CommandWindow::HandleInput - A regular keypress has been detected. Adding i to Command Actual.
CommandWindow::HandleInput - 	The current value of Command Actual is i.
CommandWindow::InvokeCommandParser - Starting the CommandParser.
CommandWindow::InvokeCommandParser - 	Writing the Command Blank.
CommandWindow::InvokeCommandParser - 	Command Blank has been written.
CommandWindow::InvokeCommandParser - 	Checking to see if Command Actual contains anything.
CommandWindow::InvokeCommandParser - 		It contains data. The current data is i. Attempting to split the string.
CommandWindow::InvokeCommandParser - 		Split is successful. The split data is Foreach($a in $cmdactSplit){"$a, "}.
CommandWindow::InvokeCommandParser - 		Attempting to find the root command in the Command Table.
CommandWindow::InvokeCommandParser - 		A root command has been identified as 'i' Now checking the length of the split to determine the ScriptBlock invocation style.
CommandWindow::InvokeCommandParser - 			Split length is 1, invoking the root command 'i' without arguments.
TheCommandTable::i - Starting the block.
TheCommandTable::i - Calling TheCommandWindow.UpdateCommandHistory method with true as an argument.
CommandWindow::UpdateCommandHistory - Starting to shuffle the Command History around.
CommandWindow::UpdateCommandHistory - Setting History E ('use rope tree') to History A ('use fork').
CommandWindow::UpdateCommandHistory - Setting History A ('use fork') to History B ('use apple').
CommandWindow::UpdateCommandHistory - Setting History B ('use apple') to History C ('l').
CommandWindow::UpdateCommandHistory - Setting History C ('l') to History D ('take apple').
CommandWindow::UpdateCommandHistory - Setting History D ('take apple') to Command Actual ('i').
CommandWindow::UpdateCommandHistory - The current layout of the history is as follows: E: use fork, A: use apple, B: l, C: take apple, D: i
CommandWindow::UpdateCommandHistory - Checking to see if the Command Valid flag is true or false.
CommandWindow::UpdateCommandHistory - 	The Command Valid Flag is true. Set the Foreground Color to HistoryEntryValid.
CommandWindow::UpdateCommandHistory - 	Clearing the Command Actual.
CommandWindow::UpdateCommandHistory - Set the CommandHistoryDirty flag to true so the Draw function will draw the strings to the console.
TheCommandTable::i - Calling TheBufferManager.CopyActiveToBufferAWithWipe method.
TheCommandTable::i - Setting ThePreviousGlobalGameState (GamePlayScreen) to TheGlobalGameState (GamePlayScreen).
TheCommandTable::i - Setting TheGlobalGameState to InventoryScreen.
TheCommandTable::i - Leaving the block.
TheGlobalStateBlockTable::GamePlayScreen - 	Leaving the block.
GameCore::Run - 		GameRunning is true.
GameCore::Run - 		Setting LastFrameTime (6.38160496371985E+17) to CurrentFrameTime (6.38160496400531E+17).
GameCore::Run - 		Setting CurrentFrameTime (6.38160496400531E+17) to the current time in ticks (638160496416746323).
GameCore::Run - 		Checking to see if CurrentFrameTime (6.38160496416753E+17) minus LastFrameTime (6.38160496400531E+17) is GREATER THAN OR EQUAL TO MsPerFrame (33.33333).
GameCore::Run - 		The equation is 6.38160496416753E+17 - 6.38160496400531E+17 >= 33.33333
GameCore::Run - 			The value is GREATER THAN OR EQUAL TO MsPerFrame.
GameCore::Run - 			Set FpsDelta to a new TimeSpan of CurrentFrameTime minus LastFrameTime.
GameCore::Run - 			Call the Logic method.
GameCore::Logic - Starting the Logic method.
GameCore::Logic - Invoking the ScriptBlock for the game state InventoryScreen
TheGlobalStateBlockTable::InventoryScreen - Starting the block.
TheGlobalStateBlockTable::InventoryScreen - 	Checking to see if the Inventory Window instance is null.
TheGlobalStateBlockTable::InventoryScreen - 		It is - creating a new instance.
TheGlobalStateBlockTable::InventoryScreen - Checking to see if the GPS Buffer Backup Restore flag is true to turn it off.
TheGlobalStateBlockTable::InventoryScreen - 	Calling TheInventoryWindow.Draw method.
TheGlobalStateBlockTable::InventoryScreen - 	Calling TheInventoryWindow.HandleInput method.
TheGlobalStateBlockTable::InventoryScreen - 	Leaving the block.
GameCore::Run - 		GameRunning is true.
GameCore::Run - 		Setting LastFrameTime (6.38160496400531E+17) to CurrentFrameTime (6.38160496416753E+17).
GameCore::Run - 		Setting CurrentFrameTime (6.38160496416753E+17) to the current time in ticks (638160496431687014).
GameCore::Run - 		Checking to see if CurrentFrameTime (6.3816049643171E+17) minus LastFrameTime (6.38160496416753E+17) is GREATER THAN OR EQUAL TO MsPerFrame (33.33333).
GameCore::Run - 		The equation is 6.3816049643171E+17 - 6.38160496416753E+17 >= 33.33333
GameCore::Run - 			The value is GREATER THAN OR EQUAL TO MsPerFrame.
GameCore::Run - 			Set FpsDelta to a new TimeSpan of CurrentFrameTime minus LastFrameTime.
GameCore::Run - 			Call the Logic method.
GameCore::Logic - Starting the Logic method.
GameCore::Logic - Invoking the ScriptBlock for the game state InventoryScreen
TheGlobalStateBlockTable::InventoryScreen - Starting the block.
TheGlobalStateBlockTable::InventoryScreen - 	Checking to see if the Inventory Window instance is null.
TheGlobalStateBlockTable::InventoryScreen - 		It isn't, skipping.
TheGlobalStateBlockTable::InventoryScreen - Checking to see if the GPS Buffer Backup Restore flag is true to turn it off.
TheGlobalStateBlockTable::InventoryScreen - 	Calling TheInventoryWindow.Draw method.
TheGlobalStateBlockTable::InventoryScreen - 	Calling TheInventoryWindow.HandleInput method.
TheGlobalStateBlockTable::InventoryScreen - 	Leaving the block.
GameCore::Run - 		GameRunning is true.
GameCore::Run - 		Setting LastFrameTime (6.38160496416753E+17) to CurrentFrameTime (6.3816049643171E+17).
GameCore::Run - 		Setting CurrentFrameTime (6.3816049643171E+17) to the current time in ticks (638160496437938147).
GameCore::Run - 		Checking to see if CurrentFrameTime (6.38160496437965E+17) minus LastFrameTime (6.3816049643171E+17) is GREATER THAN OR EQUAL TO MsPerFrame (33.33333).
GameCore::Run - 		The equation is 6.38160496437965E+17 - 6.3816049643171E+17 >= 33.33333
GameCore::Run - 			The value is GREATER THAN OR EQUAL TO MsPerFrame.
GameCore::Run - 			Set FpsDelta to a new TimeSpan of CurrentFrameTime minus LastFrameTime.
GameCore::Run - 			Call the Logic method.
GameCore::Logic - Starting the Logic method.
GameCore::Logic - Invoking the ScriptBlock for the game state InventoryScreen
TheGlobalStateBlockTable::InventoryScreen - Starting the block.
TheGlobalStateBlockTable::InventoryScreen - 	Checking to see if the Inventory Window instance is null.
TheGlobalStateBlockTable::InventoryScreen - 		It isn't, skipping.
TheGlobalStateBlockTable::InventoryScreen - Checking to see if the GPS Buffer Backup Restore flag is true to turn it off.
TheGlobalStateBlockTable::InventoryScreen - 	Calling TheInventoryWindow.Draw method.
TheGlobalStateBlockTable::InventoryScreen - 	Calling TheInventoryWindow.HandleInput method.
TheGlobalStateBlockTable::InventoryScreen - 	Leaving the block.
GameCore::Run - 		GameRunning is true.
GameCore::Run - 		Setting LastFrameTime (6.3816049643171E+17) to CurrentFrameTime (6.38160496437965E+17).
GameCore::Run - 		Setting CurrentFrameTime (6.38160496437965E+17) to the current time in ticks (638160496443445624).
GameCore::Run - 		Checking to see if CurrentFrameTime (6.38160496443455E+17) minus LastFrameTime (6.38160496437965E+17) is GREATER THAN OR EQUAL TO MsPerFrame (33.33333).
GameCore::Run - 		The equation is 6.38160496443455E+17 - 6.38160496437965E+17 >= 33.33333
GameCore::Run - 			The value is GREATER THAN OR EQUAL TO MsPerFrame.
GameCore::Run - 			Set FpsDelta to a new TimeSpan of CurrentFrameTime minus LastFrameTime.
GameCore::Run - 			Call the Logic method.
GameCore::Logic - Starting the Logic method.
GameCore::Logic - Invoking the ScriptBlock for the game state InventoryScreen
TheGlobalStateBlockTable::InventoryScreen - Starting the block.
TheGlobalStateBlockTable::InventoryScreen - 	Checking to see if the Inventory Window instance is null.
TheGlobalStateBlockTable::InventoryScreen - 		It isn't, skipping.
TheGlobalStateBlockTable::InventoryScreen - Checking to see if the GPS Buffer Backup Restore flag is true to turn it off.
TheGlobalStateBlockTable::InventoryScreen - 	Calling TheInventoryWindow.Draw method.
TheGlobalStateBlockTable::InventoryScreen - 	Calling TheInventoryWindow.HandleInput method.
TheGlobalStateBlockTable::InventoryScreen - 	Leaving the block.
GameCore::Run - 		GameRunning is true.
GameCore::Run - 		Setting LastFrameTime (6.38160496437965E+17) to CurrentFrameTime (6.38160496443455E+17).
GameCore::Run - 		Setting CurrentFrameTime (6.38160496443455E+17) to the current time in ticks (638160496458022298).
GameCore::Run - 		Checking to see if CurrentFrameTime (6.38160496458045E+17) minus LastFrameTime (6.38160496443455E+17) is GREATER THAN OR EQUAL TO MsPerFrame (33.33333).
GameCore::Run - 		The equation is 6.38160496458045E+17 - 6.38160496443455E+17 >= 33.33333
GameCore::Run - 			The value is GREATER THAN OR EQUAL TO MsPerFrame.
GameCore::Run - 			Set FpsDelta to a new TimeSpan of CurrentFrameTime minus LastFrameTime.
GameCore::Run - 			Call the Logic method.
GameCore::Logic - Starting the Logic method.
GameCore::Logic - Invoking the ScriptBlock for the game state InventoryScreen
TheGlobalStateBlockTable::InventoryScreen - Starting the block.
TheGlobalStateBlockTable::InventoryScreen - 	Checking to see if the Inventory Window instance is null.
TheGlobalStateBlockTable::InventoryScreen - 		It isn't, skipping.
TheGlobalStateBlockTable::InventoryScreen - Checking to see if the GPS Buffer Backup Restore flag is true to turn it off.
TheGlobalStateBlockTable::InventoryScreen - 	Calling TheInventoryWindow.Draw method.
TheGlobalStateBlockTable::InventoryScreen - 	Calling TheInventoryWindow.HandleInput method.
TheGlobalStateBlockTable::InventoryScreen - 	Leaving the block.
GameCore::Run - 		GameRunning is true.
GameCore::Run - 		Setting LastFrameTime (6.38160496443455E+17) to CurrentFrameTime (6.38160496458045E+17).
GameCore::Run - 		Setting CurrentFrameTime (6.38160496458045E+17) to the current time in ticks (638160496464269273).
GameCore::Run - 		Checking to see if CurrentFrameTime (6.38160496464295E+17) minus LastFrameTime (6.38160496458045E+17) is GREATER THAN OR EQUAL TO MsPerFrame (33.33333).
GameCore::Run - 		The equation is 6.38160496464295E+17 - 6.38160496458045E+17 >= 33.33333
GameCore::Run - 			The value is GREATER THAN OR EQUAL TO MsPerFrame.
GameCore::Run - 			Set FpsDelta to a new TimeSpan of CurrentFrameTime minus LastFrameTime.
GameCore::Run - 			Call the Logic method.
GameCore::Logic - Starting the Logic method.
GameCore::Logic - Invoking the ScriptBlock for the game state InventoryScreen
TheGlobalStateBlockTable::InventoryScreen - Starting the block.
TheGlobalStateBlockTable::InventoryScreen - 	Checking to see if the Inventory Window instance is null.
TheGlobalStateBlockTable::InventoryScreen - 		It isn't, skipping.
TheGlobalStateBlockTable::InventoryScreen - Checking to see if the GPS Buffer Backup Restore flag is true to turn it off.
TheGlobalStateBlockTable::InventoryScreen - 	Calling TheInventoryWindow.Draw method.
TheGlobalStateBlockTable::InventoryScreen - 	Calling TheInventoryWindow.HandleInput method.
TheGlobalStateBlockTable::InventoryScreen - 	Leaving the block.
GameCore::Run - 		GameRunning is true.
GameCore::Run - 		Setting LastFrameTime (6.38160496458045E+17) to CurrentFrameTime (6.38160496464295E+17).
GameCore::Run - 		Setting CurrentFrameTime (6.38160496464295E+17) to the current time in ticks (638160496469498578).
GameCore::Run - 		Checking to see if CurrentFrameTime (6.3816049646953E+17) minus LastFrameTime (6.38160496464295E+17) is GREATER THAN OR EQUAL TO MsPerFrame (33.33333).
GameCore::Run - 		The equation is 6.3816049646953E+17 - 6.38160496464295E+17 >= 33.33333
GameCore::Run - 			The value is GREATER THAN OR EQUAL TO MsPerFrame.
GameCore::Run - 			Set FpsDelta to a new TimeSpan of CurrentFrameTime minus LastFrameTime.
GameCore::Run - 			Call the Logic method.
GameCore::Logic - Starting the Logic method.
GameCore::Logic - Invoking the ScriptBlock for the game state InventoryScreen
TheGlobalStateBlockTable::InventoryScreen - Starting the block.
TheGlobalStateBlockTable::InventoryScreen - 	Checking to see if the Inventory Window instance is null.
TheGlobalStateBlockTable::InventoryScreen - 		It isn't, skipping.
TheGlobalStateBlockTable::InventoryScreen - Checking to see if the GPS Buffer Backup Restore flag is true to turn it off.
TheGlobalStateBlockTable::InventoryScreen - 	Calling TheInventoryWindow.Draw method.
TheGlobalStateBlockTable::InventoryScreen - 	Calling TheInventoryWindow.HandleInput method.
TheGlobalStateBlockTable::InventoryScreen - 	Leaving the block.
GameCore::Run - 		GameRunning is true.
GameCore::Run - 		Setting LastFrameTime (6.38160496464295E+17) to CurrentFrameTime (6.3816049646953E+17).
GameCore::Run - 		Setting CurrentFrameTime (6.3816049646953E+17) to the current time in ticks (638160496474154524).
GameCore::Run - 		Checking to see if CurrentFrameTime (6.38160496474163E+17) minus LastFrameTime (6.3816049646953E+17) is GREATER THAN OR EQUAL TO MsPerFrame (33.33333).
GameCore::Run - 		The equation is 6.38160496474163E+17 - 6.3816049646953E+17 >= 33.33333
GameCore::Run - 			The value is GREATER THAN OR EQUAL TO MsPerFrame.
GameCore::Run - 			Set FpsDelta to a new TimeSpan of CurrentFrameTime minus LastFrameTime.
GameCore::Run - 			Call the Logic method.
GameCore::Logic - Starting the Logic method.
GameCore::Logic - Invoking the ScriptBlock for the game state GamePlayScreen
TheGlobalStateBlockTable::GamePlayScreen - Starting the block.
TheGlobalStateBlockTable::GamePlayScreen - Checking to see if the Inventory Window instance isn't null.
TheGlobalStateBlockTable::GamePlayScreen - It isn't null - setting to null.
TheGlobalStateBlockTable::GamePlayScreen - Checking to see if the GPS can be restored from a buffer backup.
TheGlobalStateBlockTable::GamePlayScreen - 	Calling TheStatusWindow.Draw method.
TheGlobalStateBlockTable::GamePlayScreen - 	Calling TheCommandWindow.Draw method.
CommandWindow::Draw - Starting the Draw function.
CommandWindow::Draw - Calling base class Draw function.
CommandWindow::Draw - Checking to see if the CommandDivDirty flag is true.
CommandWindow::Draw - Checking to see if the CommandHistoryDirty flag is true.
CommandWindow::Draw - 	CommandHistoryDirty is true, draw the Command History strings to the console.
CommandWindow::Draw - 	Setting the CommandHistoryDirty flag to false.
TheGlobalStateBlockTable::GamePlayScreen - 	Calling TheSceneWindow.Draw method.
TheGlobalStateBlockTable::GamePlayScreen - 	Calling TheMessageWindow.Draw method.
MessageWindow::Draw - Entering the Draw method.
MessageWindow::Draw - Calling the base class Draw method.
MessageWindow::Draw - Checking to see if MessageADirty is true.
MessageWindow::Draw - MessageADirty is true, redrawing Message A to the window at its predefined coordinates (blank first, then string).
MessageWindow::Draw - Setting MessageADirty to false.
MessageWindow::Draw - Checking to see if MessageBDirty is true.
MessageWindow::Draw - MessageBDirty is true, redrawing Message B to the window at its predefined coordinates (blank first, then string).
MessageWindow::Draw - Setting MessageBDirty to false.
MessageWindow::Draw - Checking to see if MessageCDirty is true.
MessageWindow::Draw - MessageCDirty is true, redrawing Message C to the window at its predefined coordinates (blank first, then string).
MessageWindow::Draw - Setting MessageCDirty to false.
MessageWindow::Draw - Leaving the Draw method.
TheGlobalStateBlockTable::GamePlayScreen - 	Calling TheCommandWindow.HandleInput method.
CommandWindow::HandleInput - A regular keypress has been detected. Adding   to Command Actual.
CommandWindow::HandleInput - 	The current value of Command Actual is  .
