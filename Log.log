WELCOME TO THE DANGER ZONE!!!
CommandWindow::Constructor - Starting the constructor.
CommandWindow::Constructor - 	Setting LeftTop and BottomRight relative to the desired window position.
CommandWindow::Constructor - 	Setting the BorderDrawColors relative to the desired effect for this window (all sides CCWhite24).
CommandWindow::Constructor - 	Settings BorderStrings relative to the desired strings for this window.
CommandWindow::Constructor - 	Calling UpdateDimensions to ensure that measurements are correct.
CommandWindow::Constructor - 	CommandDivDirty to true and CommandHistoryDirty to false.
CommandWindow::Constructor - 	Defining rowBase to 20 and columnBase to 2.
CommandWindow::Constructor - 	Calculating History String Drawing Coordinates.
CommandWindow::Constructor - 	History String Drawing Coordinates have been calculated as follows:
CommandWindow::Constructor - 		Div: (R18, C2)
CommandWindow::Constructor - 		E: (R13, C2)
CommandWindow::Constructor - 		D: (R17, C2)
CommandWindow::Constructor - 		C: (R16, C2)
CommandWindow::Constructor - 		B: (R15, C2)
CommandWindow::Constructor - 		A: (R14, C2)
GameCore::Constructor - Starting the constructor.
GameCore::Constructor - 	Setting up variables.
GameCore::Constructor - 	Leaving the constructor.
GameCore::Run - Starting the Run method.
GameCore::Run - 	Checking to see if the GameRunning flag is true or not.
GameCore::Run - 		GameRunning is true.
GameCore::Run - 		Setting LastFrameTime (0) to CurrentFrameTime (0).
GameCore::Run - 		Setting CurrentFrameTime (0) to the current time in ticks (638153820933262089).
GameCore::Run - 		Checking to see if CurrentFrameTime (6.38153820933269E+17) minus LastFrameTime (0) is GREATER THAN OR EQUAL TO MsPerFrame (33.33333).
GameCore::Run - 		The equation is 6.38153820933269E+17 - 0 >= 33.33333
GameCore::Run - 			The value is GREATER THAN OR EQUAL TO MsPerFrame.
GameCore::Run - 			Set FpsDelta to a new TimeSpan of CurrentFrameTime minus LastFrameTime.
GameCore::Run - 			Call the Logic method.
GameCore::Logic - Starting the Logic method.
GameCore::Logic - Invoking the ScriptBlock for the game state GamePlayScreen
TheGlobalStateBlockTable::GamePlayScreen - Starting the block.
TheGlobalStateBlockTable::GamePlayScreen - Checking to see if the Inventory Window instance isn't null.
TheGlobalStateBlockTable::GamePlayScreen - The instance is already null, skipping.
TheGlobalStateBlockTable::GamePlayScreen - Checking to see if the GPS can be restored from a buffer backup.
TheGlobalStateBlockTable::GamePlayScreen - 	Calling TheStatusWindow.Draw method.
TheGlobalStateBlockTable::GamePlayScreen - 	Calling TheCommandWindow.Draw method.
CommandWindow::Draw - Starting the Draw function.
CommandWindow::Draw - Calling base class Draw function.
CommandWindow::Draw - Checking to see if the CommandDivDirty flag is true.
CommandWindow::Draw - 	CommandDivDirty is true, draw the Command Div to the console.
CommandWindow::Draw - 	Setting CommandDivDirty to false to avoid overdraws.
CommandWindow::Draw - Checking to see if the CommandHistoryDirty flag is true.
TheGlobalStateBlockTable::GamePlayScreen - 	Calling TheSceneWindow.Draw method.
TheGlobalStateBlockTable::GamePlayScreen - 	Calling TheMessageWindow.Draw method.
TheGlobalStateBlockTable::GamePlayScreen - 	Calling TheCommandWindow.HandleInput method.
CommandWindow::HandleInput - A regular keypress has been detected. Adding i to Command Actual.
CommandWindow::HandleInput - 	The current value of Command Actual is i.
CommandWindow::HandleInput - A regular keypress has been detected. Adding n to Command Actual.
CommandWindow::HandleInput - 	The current value of Command Actual is in.
CommandWindow::HandleInput - A regular keypress has been detected. Adding v to Command Actual.
CommandWindow::HandleInput - 	The current value of Command Actual is inv.
CommandWindow::HandleInput - A regular keypress has been detected. Adding e to Command Actual.
CommandWindow::HandleInput - 	The current value of Command Actual is inve.
CommandWindow::HandleInput - A regular keypress has been detected. Adding n to Command Actual.
CommandWindow::HandleInput - 	The current value of Command Actual is inven.
CommandWindow::HandleInput - A regular keypress has been detected. Adding r to Command Actual.
CommandWindow::HandleInput - 	The current value of Command Actual is invenr.
CommandWindow::HandleInput - A regular keypress has been detected. Adding t to Command Actual.
CommandWindow::HandleInput - 	The current value of Command Actual is invenrt.
CommandWindow::HandleInput - A regular keypress has been detected. Adding o to Command Actual.
CommandWindow::HandleInput - 	The current value of Command Actual is invenrto.
CommandWindow::HandleInput - Backspace Key has been pressed. Virtual Key Code value is 8
CommandWindow::HandleInput - 	Obtaining current Cursor Position X (Row) Value as FPX. The current value is 8
CommandWindow::HandleInput - 	Comparing FPX against the Default Coordinates X (Row). The default value is 1, and FPX is 8.
CommandWindow::HandleInput - 		FPX is GREATER THAN the Default Coordinates X (Row).
CommandWindow::HandleInput - 		The character that would be deleted here is o.
CommandWindow::HandleInput - 		Performing character deletion from console window.
CommandWindow::HandleInput - 		The current value of Command Actual is invenrto. Attempting to delete the last character.
CommandWindow::HandleInput - 		The last character has been deleted. The current value of Command Actual is invenrt.
CommandWindow::HandleInput - Backspace Key has been pressed. Virtual Key Code value is 8
CommandWindow::HandleInput - 	Obtaining current Cursor Position X (Row) Value as FPX. The current value is 7
CommandWindow::HandleInput - 	Comparing FPX against the Default Coordinates X (Row). The default value is 1, and FPX is 7.
CommandWindow::HandleInput - 		FPX is GREATER THAN the Default Coordinates X (Row).
CommandWindow::HandleInput - 		The character that would be deleted here is t.
CommandWindow::HandleInput - 		Performing character deletion from console window.
CommandWindow::HandleInput - 		The current value of Command Actual is invenrt. Attempting to delete the last character.
CommandWindow::HandleInput - 		The last character has been deleted. The current value of Command Actual is invenr.
CommandWindow::HandleInput - Backspace Key has been pressed. Virtual Key Code value is 8
CommandWindow::HandleInput - 	Obtaining current Cursor Position X (Row) Value as FPX. The current value is 6
CommandWindow::HandleInput - 	Comparing FPX against the Default Coordinates X (Row). The default value is 1, and FPX is 6.
CommandWindow::HandleInput - 		FPX is GREATER THAN the Default Coordinates X (Row).
CommandWindow::HandleInput - 		The character that would be deleted here is r.
CommandWindow::HandleInput - 		Performing character deletion from console window.
CommandWindow::HandleInput - 		The current value of Command Actual is invenr. Attempting to delete the last character.
CommandWindow::HandleInput - 		The last character has been deleted. The current value of Command Actual is inven.
CommandWindow::HandleInput - A regular keypress has been detected. Adding t to Command Actual.
CommandWindow::HandleInput - 	The current value of Command Actual is invent.
CommandWindow::HandleInput - A regular keypress has been detected. Adding o to Command Actual.
CommandWindow::HandleInput - 	The current value of Command Actual is invento.
CommandWindow::HandleInput - A regular keypress has been detected. Adding r to Command Actual.
CommandWindow::HandleInput - 	The current value of Command Actual is inventor.
CommandWindow::HandleInput - A regular keypress has been detected. Adding y to Command Actual.
CommandWindow::HandleInput - 	The current value of Command Actual is inventory.
CommandWindow::InvokeCommandParser - Starting the CommandParser.
CommandWindow::InvokeCommandParser - 	Writing the Command Blank.
CommandWindow::InvokeCommandParser - 	Command Blank has been written.
CommandWindow::InvokeCommandParser - 	Checking to see if Command Actual contains anything.
CommandWindow::InvokeCommandParser - 		It contains data. The current data is inventory. Attempting to split the string.
CommandWindow::InvokeCommandParser - 		Split is successful. The split data is Foreach($a in $cmdactSplit){"$a, "}.
CommandWindow::InvokeCommandParser - 		Attempting to find the root command in the Command Table.
CommandWindow::InvokeCommandParser - 		A root command has been identified as 'inventory' Now checking the length of the split to determine the ScriptBlock invocation style.
CommandWindow::InvokeCommandParser - 			Split length is 1, invoking the root command 'inventory' without arguments.
TheCommandTable::inventory - Starting the block.
TheCommandTable::inventory - 	Calling TheCommandWindow.UpdateCommandHistory method with true as an argument.
CommandWindow::UpdateCommandHistory - Starting to shuffle the Command History around.
CommandWindow::UpdateCommandHistory - Setting History E ('                  ') to History A ('                  ').
CommandWindow::UpdateCommandHistory - Setting History A ('                  ') to History B ('                  ').
CommandWindow::UpdateCommandHistory - Setting History B ('                  ') to History C ('                  ').
CommandWindow::UpdateCommandHistory - Setting History C ('                  ') to History D ('                  ').
CommandWindow::UpdateCommandHistory - Setting History D ('                  ') to Command Actual ('inventory').
CommandWindow::UpdateCommandHistory - The current layout of the history is as follows: E:                   , A:                   , B:                   , C:                   , D: inventory
CommandWindow::UpdateCommandHistory - Checking to see if the Command Valid flag is true or false.
CommandWindow::UpdateCommandHistory - 	The Command Valid Flag is true. Set the Foreground Color to HistoryEntryValid.
CommandWindow::UpdateCommandHistory - 	Clearing the Command Actual.
CommandWindow::UpdateCommandHistory - Set the CommandHistoryDirty flag to true so the Draw function will draw the strings to the console.
TheCommandTable::inventory - 	Calling TheBufferManager.CopyActiveToBufferAWithWipe method.
TheCommandTable::inventory - 	Setting ThePreviousGlobalGameState (GamePlayScreen) to TheGlobalGameState (GamePlayScreen).
TheCommandTable::inventory - 	Setting TheGlobalGameState to InventoryScreen.
TheCommandTable::inventory - 	Leaving the block.
TheGlobalStateBlockTable::GamePlayScreen - 	Leaving the block.
GameCore::Run - 		GameRunning is true.
GameCore::Run - 		Setting LastFrameTime (0) to CurrentFrameTime (6.38153820933269E+17).
GameCore::Run - 		Setting CurrentFrameTime (6.38153820933269E+17) to the current time in ticks (638153821055858580).
GameCore::Run - 		Checking to see if CurrentFrameTime (6.38153821055865E+17) minus LastFrameTime (6.38153820933269E+17) is GREATER THAN OR EQUAL TO MsPerFrame (33.33333).
GameCore::Run - 		The equation is 6.38153821055865E+17 - 6.38153820933269E+17 >= 33.33333
GameCore::Run - 			The value is GREATER THAN OR EQUAL TO MsPerFrame.
GameCore::Run - 			Set FpsDelta to a new TimeSpan of CurrentFrameTime minus LastFrameTime.
GameCore::Run - 			Call the Logic method.
GameCore::Logic - Starting the Logic method.
GameCore::Logic - Invoking the ScriptBlock for the game state InventoryScreen
TheGlobalStateBlockTable::InventoryScreen - Starting the block.
TheGlobalStateBlockTable::InventoryScreen - 	Checking to see if the Inventory Window instance is null.
TheGlobalStateBlockTable::InventoryScreen - 		It is - creating a new instance.
TheGlobalStateBlockTable::InventoryScreen - Checking to see if the GPS Buffer Backup Restore flag is true to turn it off.
TheGlobalStateBlockTable::InventoryScreen - 	Calling TheInventoryWindow.Draw method.
TheGlobalStateBlockTable::InventoryScreen - 	Calling TheInventoryWindow.HandleInput method.
TheGlobalStateBlockTable::InventoryScreen - 	Leaving the block.
GameCore::Run - 		GameRunning is true.
GameCore::Run - 		Setting LastFrameTime (6.38153820933269E+17) to CurrentFrameTime (6.38153821055865E+17).
GameCore::Run - 		Setting CurrentFrameTime (6.38153821055865E+17) to the current time in ticks (638153821071783808).
GameCore::Run - 		Checking to see if CurrentFrameTime (6.38153821071808E+17) minus LastFrameTime (6.38153821055865E+17) is GREATER THAN OR EQUAL TO MsPerFrame (33.33333).
GameCore::Run - 		The equation is 6.38153821071808E+17 - 6.38153821055865E+17 >= 33.33333
GameCore::Run - 			The value is GREATER THAN OR EQUAL TO MsPerFrame.
GameCore::Run - 			Set FpsDelta to a new TimeSpan of CurrentFrameTime minus LastFrameTime.
GameCore::Run - 			Call the Logic method.
GameCore::Logic - Starting the Logic method.
GameCore::Logic - Invoking the ScriptBlock for the game state GamePlayScreen
TheGlobalStateBlockTable::GamePlayScreen - Starting the block.
TheGlobalStateBlockTable::GamePlayScreen - Checking to see if the Inventory Window instance isn't null.
TheGlobalStateBlockTable::GamePlayScreen - It isn't null - setting to null.
TheGlobalStateBlockTable::GamePlayScreen - Checking to see if the GPS can be restored from a buffer backup.
TheGlobalStateBlockTable::GamePlayScreen - 	Calling TheStatusWindow.Draw method.
TheGlobalStateBlockTable::GamePlayScreen - 	Calling TheCommandWindow.Draw method.
CommandWindow::Draw - Starting the Draw function.
CommandWindow::Draw - Calling base class Draw function.
CommandWindow::Draw - Checking to see if the CommandDivDirty flag is true.
CommandWindow::Draw - Checking to see if the CommandHistoryDirty flag is true.
CommandWindow::Draw - 	CommandHistoryDirty is true, draw the Command History strings to the console.
CommandWindow::Draw - 	Setting the CommandHistoryDirty flag to false.
TheGlobalStateBlockTable::GamePlayScreen - 	Calling TheSceneWindow.Draw method.
TheGlobalStateBlockTable::GamePlayScreen - 	Calling TheMessageWindow.Draw method.
TheGlobalStateBlockTable::GamePlayScreen - 	Calling TheCommandWindow.HandleInput method.
CommandWindow::HandleInput - A regular keypress has been detected. Adding   to Command Actual.
CommandWindow::HandleInput - 	The current value of Command Actual is  .
